#Ahora si, se procedera con la limpieza de los datos:
#Limpieza
#1.. Datos faltantes
df.dropna(inplace=True) # Eliminar filas o columnas que contienen valores NaN (valores faltantes) del DataFrame

# Imprimir información sobre el DataFrame después de la limpieza
print("Información del DataFrame después de la limpieza:")
print(df.info())
Información del DataFrame después de la limpieza:
<class 'pandas.core.frame.DataFrame'>
RangeIndex: 310 entries, 0 to 309
Data columns (total 19 columns):
 #   Column            Non-Null Count  Dtype 
---  ------            --------------  ----- 
 0   Participante      310 non-null    int64 
 1   Nombre            310 non-null    object
 2   Edad              310 non-null    int64 
 3   Fecha             310 non-null    object
 4   Género            310 non-null    object
 5   Anteojos          310 non-null    object
 6   Barba             310 non-null    object
 7   Bigote            310 non-null    object
 8   Jornada           310 non-null    object
 9   Clima             310 non-null    object
 10  Luminosidad  LUX  310 non-null    int64 
 11  ID-Video          310 non-null    int64 
 12  FC SISTOLE        310 non-null    int64 
 13  FC DIASTOLE       310 non-null    int64 
 14  Género_encoded    310 non-null    int64 
 15  Clima_encoded     310 non-null    int64 
 16  Hora_del_dia      310 non-null    int32 
 17  Minutos           310 non-null    int32 
 18  Segundos          310 non-null    int32 
dtypes: int32(3), int64(8), object(8)
memory usage: 42.5+ KB
None

#Se procede a instalar librerias como matplotlib y numpy
!pip install matplotlib
!pip install numpy
!pip install unidecode

# Lectura del dataset
drive.mount('/gdrive')
ruta = "/gdrive/MyDrive/datasetu.csv"
data = pd.read_csv(ruta, encoding='latin-1')

#2.. Columnas irrelevantes
#2.1.. Analisis de las variables categoricas
# Conteo de los niveles en las diferentes columnas categóricas
cols_cat = [  'Fecha',  'Género',
       'Anteojos', 'Barba', 'Clima' ]

for col in cols_cat:
   # Calcular el número de niveles únicos en la columna
    num_niveles = df[col].nunique()
   # Imprimir el resultado del análisis para cada columna
    print(f'Columna {col}: {num_niveles} subniveles')
Columna Fecha: 8 subniveles
Columna Género: 3 subniveles
Columna Anteojos: 2 subniveles
Columna Barba: 3 subniveles
Columna Clima: 2 subniveles

 #Se eliminara la columna Bigote, ya que contiene un solo valor y la columna jornada,
 #ya que proporciona informacion rebundante. Asi mismo, la columna 'Nombre' porque existe una columna llamada numero de participante.

# Verificar que 'data' sea un DataFrame
if isinstance(df, pd.DataFrame):
    # Imprimir el tamaño del DataFrame antes de eliminar columnas irrelevantes
    print(f'Tamaño del DataFrame antes de eliminar las columnas irrelevantes: {df.shape}')
    # Eliminar las columnas irrelevantes ('Nombre', 'Bigote', 'Jornada', 'ID-Video', 'Fecha', 'Anteojos', 'Barba', 'Segundos')
    df.drop(columns=['Nombre', 'Bigote', 'Jornada', 'ID-Video', 'Fecha', 'Anteojos', 'Barba', 'Segundos'], inplace=True)
    # Imprimir el tamaño del DataFrame después de eliminar las columnas irrelevantes
    print(f'Tamaño del DataFrame después de eliminar las columnas irrelevantes: {df.shape}')
else:
    print("Error: 'df' no es un DataFrame válido.")

Tamaño del DataFrame antes de eliminar las columnas irrelevantes: (310, 19)
Tamaño del DataFrame después de eliminar las columnas irrelevantes: (310, 11)
